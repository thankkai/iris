/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.dazd.iris.core.tchannel.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-18")
public class Protocol implements org.apache.thrift.TBase<Protocol, Protocol._Fields>, java.io.Serializable, Cloneable, Comparable<Protocol> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Protocol");

  private static final org.apache.thrift.protocol.TField TARGET_METHOD_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("targetMethodVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("targetMethodName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_DC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("targetDcName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceSign", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SOURCE_HOST_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceHostCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProtocolStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProtocolTupleSchemeFactory();

  private java.lang.String targetMethodVersion; // required
  private java.lang.String targetMethodName; // required
  private java.lang.String targetDcName; // required
  private java.lang.String sourceSign; // required
  private java.lang.String sourceHostCode; // required
  private java.lang.String token; // required
  private long tradeTimestamp; // optional
  private java.lang.String data; // optional
  private java.nio.ByteBuffer file; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TARGET_METHOD_VERSION((short)1, "targetMethodVersion"),
    TARGET_METHOD_NAME((short)2, "targetMethodName"),
    TARGET_DC_NAME((short)3, "targetDcName"),
    SOURCE_SIGN((short)4, "sourceSign"),
    SOURCE_HOST_CODE((short)5, "sourceHostCode"),
    TOKEN((short)6, "token"),
    TRADE_TIMESTAMP((short)7, "tradeTimestamp"),
    DATA((short)8, "data"),
    FILE((short)9, "file");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET_METHOD_VERSION
          return TARGET_METHOD_VERSION;
        case 2: // TARGET_METHOD_NAME
          return TARGET_METHOD_NAME;
        case 3: // TARGET_DC_NAME
          return TARGET_DC_NAME;
        case 4: // SOURCE_SIGN
          return SOURCE_SIGN;
        case 5: // SOURCE_HOST_CODE
          return SOURCE_HOST_CODE;
        case 6: // TOKEN
          return TOKEN;
        case 7: // TRADE_TIMESTAMP
          return TRADE_TIMESTAMP;
        case 8: // DATA
          return DATA;
        case 9: // FILE
          return FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADETIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRADE_TIMESTAMP,_Fields.DATA,_Fields.FILE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET_METHOD_VERSION, new org.apache.thrift.meta_data.FieldMetaData("targetMethodVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("targetMethodName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_DC_NAME, new org.apache.thrift.meta_data.FieldMetaData("targetDcName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_SIGN, new org.apache.thrift.meta_data.FieldMetaData("sourceSign", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_HOST_CODE, new org.apache.thrift.meta_data.FieldMetaData("sourceHostCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("tradeTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Protocol.class, metaDataMap);
  }

  public Protocol() {
  }

  public Protocol(
    java.lang.String targetMethodVersion,
    java.lang.String targetMethodName,
    java.lang.String targetDcName,
    java.lang.String sourceSign,
    java.lang.String sourceHostCode,
    java.lang.String token)
  {
    this();
    this.targetMethodVersion = targetMethodVersion;
    this.targetMethodName = targetMethodName;
    this.targetDcName = targetDcName;
    this.sourceSign = sourceSign;
    this.sourceHostCode = sourceHostCode;
    this.token = token;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Protocol(Protocol other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTargetMethodVersion()) {
      this.targetMethodVersion = other.targetMethodVersion;
    }
    if (other.isSetTargetMethodName()) {
      this.targetMethodName = other.targetMethodName;
    }
    if (other.isSetTargetDcName()) {
      this.targetDcName = other.targetDcName;
    }
    if (other.isSetSourceSign()) {
      this.sourceSign = other.sourceSign;
    }
    if (other.isSetSourceHostCode()) {
      this.sourceHostCode = other.sourceHostCode;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    this.tradeTimestamp = other.tradeTimestamp;
    if (other.isSetData()) {
      this.data = other.data;
    }
    if (other.isSetFile()) {
      this.file = org.apache.thrift.TBaseHelper.copyBinary(other.file);
    }
  }

  public Protocol deepCopy() {
    return new Protocol(this);
  }

  @Override
  public void clear() {
    this.targetMethodVersion = null;
    this.targetMethodName = null;
    this.targetDcName = null;
    this.sourceSign = null;
    this.sourceHostCode = null;
    this.token = null;
    setTradeTimestampIsSet(false);
    this.tradeTimestamp = 0;
    this.data = null;
    this.file = null;
  }

  public java.lang.String getTargetMethodVersion() {
    return this.targetMethodVersion;
  }

  public Protocol setTargetMethodVersion(java.lang.String targetMethodVersion) {
    this.targetMethodVersion = targetMethodVersion;
    return this;
  }

  public void unsetTargetMethodVersion() {
    this.targetMethodVersion = null;
  }

  /** Returns true if field targetMethodVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetMethodVersion() {
    return this.targetMethodVersion != null;
  }

  public void setTargetMethodVersionIsSet(boolean value) {
    if (!value) {
      this.targetMethodVersion = null;
    }
  }

  public java.lang.String getTargetMethodName() {
    return this.targetMethodName;
  }

  public Protocol setTargetMethodName(java.lang.String targetMethodName) {
    this.targetMethodName = targetMethodName;
    return this;
  }

  public void unsetTargetMethodName() {
    this.targetMethodName = null;
  }

  /** Returns true if field targetMethodName is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetMethodName() {
    return this.targetMethodName != null;
  }

  public void setTargetMethodNameIsSet(boolean value) {
    if (!value) {
      this.targetMethodName = null;
    }
  }

  public java.lang.String getTargetDcName() {
    return this.targetDcName;
  }

  public Protocol setTargetDcName(java.lang.String targetDcName) {
    this.targetDcName = targetDcName;
    return this;
  }

  public void unsetTargetDcName() {
    this.targetDcName = null;
  }

  /** Returns true if field targetDcName is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetDcName() {
    return this.targetDcName != null;
  }

  public void setTargetDcNameIsSet(boolean value) {
    if (!value) {
      this.targetDcName = null;
    }
  }

  public java.lang.String getSourceSign() {
    return this.sourceSign;
  }

  public Protocol setSourceSign(java.lang.String sourceSign) {
    this.sourceSign = sourceSign;
    return this;
  }

  public void unsetSourceSign() {
    this.sourceSign = null;
  }

  /** Returns true if field sourceSign is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceSign() {
    return this.sourceSign != null;
  }

  public void setSourceSignIsSet(boolean value) {
    if (!value) {
      this.sourceSign = null;
    }
  }

  public java.lang.String getSourceHostCode() {
    return this.sourceHostCode;
  }

  public Protocol setSourceHostCode(java.lang.String sourceHostCode) {
    this.sourceHostCode = sourceHostCode;
    return this;
  }

  public void unsetSourceHostCode() {
    this.sourceHostCode = null;
  }

  /** Returns true if field sourceHostCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceHostCode() {
    return this.sourceHostCode != null;
  }

  public void setSourceHostCodeIsSet(boolean value) {
    if (!value) {
      this.sourceHostCode = null;
    }
  }

  public java.lang.String getToken() {
    return this.token;
  }

  public Protocol setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public long getTradeTimestamp() {
    return this.tradeTimestamp;
  }

  public Protocol setTradeTimestamp(long tradeTimestamp) {
    this.tradeTimestamp = tradeTimestamp;
    setTradeTimestampIsSet(true);
    return this;
  }

  public void unsetTradeTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRADETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field tradeTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRADETIMESTAMP_ISSET_ID);
  }

  public void setTradeTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRADETIMESTAMP_ISSET_ID, value);
  }

  public java.lang.String getData() {
    return this.data;
  }

  public Protocol setData(java.lang.String data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public byte[] getFile() {
    setFile(org.apache.thrift.TBaseHelper.rightSize(file));
    return file == null ? null : file.array();
  }

  public java.nio.ByteBuffer bufferForFile() {
    return org.apache.thrift.TBaseHelper.copyBinary(file);
  }

  public Protocol setFile(byte[] file) {
    this.file = file == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(file.clone());
    return this;
  }

  public Protocol setFile(java.nio.ByteBuffer file) {
    this.file = org.apache.thrift.TBaseHelper.copyBinary(file);
    return this;
  }

  public void unsetFile() {
    this.file = null;
  }

  /** Returns true if field file is set (has been assigned a value) and false otherwise */
  public boolean isSetFile() {
    return this.file != null;
  }

  public void setFileIsSet(boolean value) {
    if (!value) {
      this.file = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TARGET_METHOD_VERSION:
      if (value == null) {
        unsetTargetMethodVersion();
      } else {
        setTargetMethodVersion((java.lang.String)value);
      }
      break;

    case TARGET_METHOD_NAME:
      if (value == null) {
        unsetTargetMethodName();
      } else {
        setTargetMethodName((java.lang.String)value);
      }
      break;

    case TARGET_DC_NAME:
      if (value == null) {
        unsetTargetDcName();
      } else {
        setTargetDcName((java.lang.String)value);
      }
      break;

    case SOURCE_SIGN:
      if (value == null) {
        unsetSourceSign();
      } else {
        setSourceSign((java.lang.String)value);
      }
      break;

    case SOURCE_HOST_CODE:
      if (value == null) {
        unsetSourceHostCode();
      } else {
        setSourceHostCode((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case TRADE_TIMESTAMP:
      if (value == null) {
        unsetTradeTimestamp();
      } else {
        setTradeTimestamp((java.lang.Long)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.lang.String)value);
      }
      break;

    case FILE:
      if (value == null) {
        unsetFile();
      } else {
        if (value instanceof byte[]) {
          setFile((byte[])value);
        } else {
          setFile((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET_METHOD_VERSION:
      return getTargetMethodVersion();

    case TARGET_METHOD_NAME:
      return getTargetMethodName();

    case TARGET_DC_NAME:
      return getTargetDcName();

    case SOURCE_SIGN:
      return getSourceSign();

    case SOURCE_HOST_CODE:
      return getSourceHostCode();

    case TOKEN:
      return getToken();

    case TRADE_TIMESTAMP:
      return getTradeTimestamp();

    case DATA:
      return getData();

    case FILE:
      return getFile();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TARGET_METHOD_VERSION:
      return isSetTargetMethodVersion();
    case TARGET_METHOD_NAME:
      return isSetTargetMethodName();
    case TARGET_DC_NAME:
      return isSetTargetDcName();
    case SOURCE_SIGN:
      return isSetSourceSign();
    case SOURCE_HOST_CODE:
      return isSetSourceHostCode();
    case TOKEN:
      return isSetToken();
    case TRADE_TIMESTAMP:
      return isSetTradeTimestamp();
    case DATA:
      return isSetData();
    case FILE:
      return isSetFile();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Protocol)
      return this.equals((Protocol)that);
    return false;
  }

  public boolean equals(Protocol that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_targetMethodVersion = true && this.isSetTargetMethodVersion();
    boolean that_present_targetMethodVersion = true && that.isSetTargetMethodVersion();
    if (this_present_targetMethodVersion || that_present_targetMethodVersion) {
      if (!(this_present_targetMethodVersion && that_present_targetMethodVersion))
        return false;
      if (!this.targetMethodVersion.equals(that.targetMethodVersion))
        return false;
    }

    boolean this_present_targetMethodName = true && this.isSetTargetMethodName();
    boolean that_present_targetMethodName = true && that.isSetTargetMethodName();
    if (this_present_targetMethodName || that_present_targetMethodName) {
      if (!(this_present_targetMethodName && that_present_targetMethodName))
        return false;
      if (!this.targetMethodName.equals(that.targetMethodName))
        return false;
    }

    boolean this_present_targetDcName = true && this.isSetTargetDcName();
    boolean that_present_targetDcName = true && that.isSetTargetDcName();
    if (this_present_targetDcName || that_present_targetDcName) {
      if (!(this_present_targetDcName && that_present_targetDcName))
        return false;
      if (!this.targetDcName.equals(that.targetDcName))
        return false;
    }

    boolean this_present_sourceSign = true && this.isSetSourceSign();
    boolean that_present_sourceSign = true && that.isSetSourceSign();
    if (this_present_sourceSign || that_present_sourceSign) {
      if (!(this_present_sourceSign && that_present_sourceSign))
        return false;
      if (!this.sourceSign.equals(that.sourceSign))
        return false;
    }

    boolean this_present_sourceHostCode = true && this.isSetSourceHostCode();
    boolean that_present_sourceHostCode = true && that.isSetSourceHostCode();
    if (this_present_sourceHostCode || that_present_sourceHostCode) {
      if (!(this_present_sourceHostCode && that_present_sourceHostCode))
        return false;
      if (!this.sourceHostCode.equals(that.sourceHostCode))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_tradeTimestamp = true && this.isSetTradeTimestamp();
    boolean that_present_tradeTimestamp = true && that.isSetTradeTimestamp();
    if (this_present_tradeTimestamp || that_present_tradeTimestamp) {
      if (!(this_present_tradeTimestamp && that_present_tradeTimestamp))
        return false;
      if (this.tradeTimestamp != that.tradeTimestamp)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_file = true && this.isSetFile();
    boolean that_present_file = true && that.isSetFile();
    if (this_present_file || that_present_file) {
      if (!(this_present_file && that_present_file))
        return false;
      if (!this.file.equals(that.file))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTargetMethodVersion()) ? 131071 : 524287);
    if (isSetTargetMethodVersion())
      hashCode = hashCode * 8191 + targetMethodVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetTargetMethodName()) ? 131071 : 524287);
    if (isSetTargetMethodName())
      hashCode = hashCode * 8191 + targetMethodName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTargetDcName()) ? 131071 : 524287);
    if (isSetTargetDcName())
      hashCode = hashCode * 8191 + targetDcName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceSign()) ? 131071 : 524287);
    if (isSetSourceSign())
      hashCode = hashCode * 8191 + sourceSign.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceHostCode()) ? 131071 : 524287);
    if (isSetSourceHostCode())
      hashCode = hashCode * 8191 + sourceHostCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetTradeTimestamp()) ? 131071 : 524287);
    if (isSetTradeTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tradeTimestamp);

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
    if (isSetFile())
      hashCode = hashCode * 8191 + file.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Protocol other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTargetMethodVersion()).compareTo(other.isSetTargetMethodVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetMethodVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetMethodVersion, other.targetMethodVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTargetMethodName()).compareTo(other.isSetTargetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetMethodName, other.targetMethodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTargetDcName()).compareTo(other.isSetTargetDcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetDcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetDcName, other.targetDcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceSign()).compareTo(other.isSetSourceSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceSign, other.sourceSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceHostCode()).compareTo(other.isSetSourceHostCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceHostCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceHostCode, other.sourceHostCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTradeTimestamp()).compareTo(other.isSetTradeTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTimestamp, other.tradeTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Protocol(");
    boolean first = true;

    sb.append("targetMethodVersion:");
    if (this.targetMethodVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.targetMethodVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetMethodName:");
    if (this.targetMethodName == null) {
      sb.append("null");
    } else {
      sb.append(this.targetMethodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetDcName:");
    if (this.targetDcName == null) {
      sb.append("null");
    } else {
      sb.append(this.targetDcName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceSign:");
    if (this.sourceSign == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceSign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceHostCode:");
    if (this.sourceHostCode == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceHostCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (isSetTradeTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("tradeTimestamp:");
      sb.append(this.tradeTimestamp);
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    if (isSetFile()) {
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.file, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (targetMethodVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'targetMethodVersion' was not present! Struct: " + toString());
    }
    if (targetMethodName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'targetMethodName' was not present! Struct: " + toString());
    }
    if (targetDcName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'targetDcName' was not present! Struct: " + toString());
    }
    if (sourceSign == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourceSign' was not present! Struct: " + toString());
    }
    if (sourceHostCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourceHostCode' was not present! Struct: " + toString());
    }
    if (token == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProtocolStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProtocolStandardScheme getScheme() {
      return new ProtocolStandardScheme();
    }
  }

  private static class ProtocolStandardScheme extends org.apache.thrift.scheme.StandardScheme<Protocol> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Protocol struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET_METHOD_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetMethodVersion = iprot.readString();
              struct.setTargetMethodVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetMethodName = iprot.readString();
              struct.setTargetMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_DC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetDcName = iprot.readString();
              struct.setTargetDcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceSign = iprot.readString();
              struct.setSourceSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SOURCE_HOST_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceHostCode = iprot.readString();
              struct.setSourceHostCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeTimestamp = iprot.readI64();
              struct.setTradeTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file = iprot.readBinary();
              struct.setFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Protocol struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.targetMethodVersion != null) {
        oprot.writeFieldBegin(TARGET_METHOD_VERSION_FIELD_DESC);
        oprot.writeString(struct.targetMethodVersion);
        oprot.writeFieldEnd();
      }
      if (struct.targetMethodName != null) {
        oprot.writeFieldBegin(TARGET_METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.targetMethodName);
        oprot.writeFieldEnd();
      }
      if (struct.targetDcName != null) {
        oprot.writeFieldBegin(TARGET_DC_NAME_FIELD_DESC);
        oprot.writeString(struct.targetDcName);
        oprot.writeFieldEnd();
      }
      if (struct.sourceSign != null) {
        oprot.writeFieldBegin(SOURCE_SIGN_FIELD_DESC);
        oprot.writeString(struct.sourceSign);
        oprot.writeFieldEnd();
      }
      if (struct.sourceHostCode != null) {
        oprot.writeFieldBegin(SOURCE_HOST_CODE_FIELD_DESC);
        oprot.writeString(struct.sourceHostCode);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeTimestamp()) {
        oprot.writeFieldBegin(TRADE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.tradeTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file != null) {
        if (struct.isSetFile()) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeBinary(struct.file);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProtocolTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProtocolTupleScheme getScheme() {
      return new ProtocolTupleScheme();
    }
  }

  private static class ProtocolTupleScheme extends org.apache.thrift.scheme.TupleScheme<Protocol> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Protocol struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.targetMethodVersion);
      oprot.writeString(struct.targetMethodName);
      oprot.writeString(struct.targetDcName);
      oprot.writeString(struct.sourceSign);
      oprot.writeString(struct.sourceHostCode);
      oprot.writeString(struct.token);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTradeTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetData()) {
        optionals.set(1);
      }
      if (struct.isSetFile()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTradeTimestamp()) {
        oprot.writeI64(struct.tradeTimestamp);
      }
      if (struct.isSetData()) {
        oprot.writeString(struct.data);
      }
      if (struct.isSetFile()) {
        oprot.writeBinary(struct.file);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Protocol struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.targetMethodVersion = iprot.readString();
      struct.setTargetMethodVersionIsSet(true);
      struct.targetMethodName = iprot.readString();
      struct.setTargetMethodNameIsSet(true);
      struct.targetDcName = iprot.readString();
      struct.setTargetDcNameIsSet(true);
      struct.sourceSign = iprot.readString();
      struct.setSourceSignIsSet(true);
      struct.sourceHostCode = iprot.readString();
      struct.setSourceHostCodeIsSet(true);
      struct.token = iprot.readString();
      struct.setTokenIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.tradeTimestamp = iprot.readI64();
        struct.setTradeTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.data = iprot.readString();
        struct.setDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.file = iprot.readBinary();
        struct.setFileIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

